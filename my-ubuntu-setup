#!/usr/bin/env bash

# This script configures my ubuntu setup.
# No guarantees!

set -euo pipefail

RED='\033[0;31m'
NC='\033[0m' # No Color
PROG="my_ubuntu_setup"

info () {
  echo -e "$@"
}

err () {
  echo -e "${RED}****************ERROR***************\
  \n\n$*\n\n************************************${NC}\n"
}

## Returns true/false based on users yes/no response.
ask_yn () {
  while true; do
    read -r -p "$1 y/n  " yn
    case $yn in
        [Yy]* ) return 0 ;;
        [Nn]* ) return 1 ;;
        * ) echo "Please answer yes or no.";;
    esac
  done
}

setup_php_composer () {
  local expected_checksum actual_checksum

  # Composer install
  expected_checksum="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
  php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"

  actual_checksum="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"

  if [ "$expected_checksum" != "$actual_checksum" ]
  then
      >&2 echo 'ERROR: Invalid installer checksum'
      rm composer-setup.php
      return 1
  fi

  php composer-setup.php --quiet
  local result=$?
  rm composer-setup.php
  return $result
}

setup_php () {
  local php_packages=(php-common php-cli php-xml php-curl)
  if ask_yn "${php_packages[*]} Install packages?"; then
    sudo apt install "${php_packages[@]}"
  else
    info "Skipping php packages..."
  fi

  if ask_yn "Install composer?"; then
    info "Installing composer..."

    if setup_php_composer; then
      info "Successfully installed composer. Moving to $HOME/bin..."
      mkdir -p "$HOME/bin"
      mv composer.phar "$HOME/bin/composer"
    else
      info "Failed to install composer"
    fi
  else
    info "Skipping composer..."
  fi
}

setup_rofi () {
  local rofi_packages=(rofi rofi-file-browser-extended-git rofi-greenclip rofi-calc)
  if ask_yn "${rofi_packages[*]} Install packages?"; then
      sudo apt install rofi
  else
    info "Skipping rofi packages..."
  fi

  if ask_yn "Copy configs?"; then
    info "cp rofi config to home"
    local rofi_dir="$HOME/.config/rofi"
    mkdir -p "$rofi_dir"
    cp config/rofi/config.rasi "$rofi_dir"/config.rasi
    cp config/rofi/file-browser "$rofi_dir"/file-browser

  else
    info "Skipping config..."
  fi
}

setup_gitsecrets () {
  info "git clone git@github.com:awslabs/git-secrets $HOME/workspace/git-secrets"
  info "ln -sf $HOME/workspace/git-secrets/git-secrets $HOME/bin/git-secrets"
  read -r
}

setup_greenclip () {
  wget https://github.com/erebe/greenclip/releases/download/v4.2/greenclip
  if ask_yn "Install https://github.com/erebe/greenclip?"; then
    wget -O ~/bin/greenclip https://github.com/erebe/greenclip/releases/download/v4.2/greenclip
    chmod +x ~/bin/greenclip
    info "Done! Press enter to continue..."
    read -r
  else
    info "Skipping greenclip"
  fi
}

setup_fzf () {
    info "Installing fzf..."
    git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME"/.fzf
    "$HOME"/.fzf/install
}

install_other_packages () {
  if ask_yn "Install nvm?"; then
    info "Installing nvm..."
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
    info "Install latest node version"
    nvm install node
    info "Done! Press enter to continue..."
    read -r
  fi

  if ask_yn "Install autoenv?"; then
    info "Installing autoenv using npm..."
    npm install -g '@hyperupcall/autoenv'
    info "Note: You may have to update bash_profile to point to autoenv under a new node version...
      Done! Press enter to continue..."
    read -r
  fi

  if ask_yn "Install Calibre?"; then
    info "sudo -v && wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin"
  fi
}

install_flatpak_packages () {
  local flathub_packages=("io.gitlab.news_flash.NewsFlash" "com.github.johnfactotum.Foliate")
  info "Setup flathub"
  sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

  if ask_yn "${flathub_packages[*]} Install packages?"; then
    flatpak install flathub "${flathub_packages[@]}"
  else
    info "Skipping flatpak packages..."
  fi
}

run_setup_scripts () {
  # Setup time
  setup_gitsecrets
  setup_greenclip
  setup_fzf
  setup_cron_jobs
  setup_gpg
  setup_sound
  setup_i3
  setup_ctags
  setup_nvim
  setup_rofi
  setup_emacs
  setup_ledger
}

run_setup () {
  # Firt of all
  info "
    Generate a new gpg key, ssh-key and add to github
    https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key
    https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

    Setup submodules
    git submodule init
    git submodule update
  "

  # Basics
  install_apt_packages
  install_snap_packages
  install_other_packages

  # Rust stuff
  setup_rustup
  install_cargo_packages

  # TODO :: Move these to individual setup scripts
  manual_setup_packages

  # Setup tools
  run_setup_scripts

  copy_dot_files_to_home
  info "Woooho! Successfully completed setup. Restart your terminal and you should be good to go!"
}

setup_emacs () {
  info "Install emacs and copying configs...Enter to continue"
  local packages=(emacs)
  if ask_yn "${packages[*]} Install packages?"; then
    info "Installing ${packages[*]}"
    sudo snap install "${packages[@]}" --classic
  else
    info "Skipping emacs package download"
  fi

  if ask_yn "Copy emacs config?"; then
    local emacs_dir="$HOME/.emacs.d"
    info "copying emacs config to home"
    mkdir -p "$emacs_dir"
    cp -r config/emacs.d/* "$emacs_dir"/
  else
    info "Skipping emacs package download"
  fi
}

setup_ctags () {
  info "
    Clone and install  ctags...
    $ git clone https://github.com/universal-ctags/ctags $HOME/workspace/ctags
    $ cd $HOME/workspace/ctags
    $ ./autogen.sh
    $ ./configure --prefix=$HOME/.local # defaults to /usr/local
    $ make
    $ make install # may require extra privileges depending on where to install
    Press enter to continue...
  "
  read -r

  info "Copying ctags.d file to $HOME..."
  mkdir -p "$HOME"/.ctags.d
  cp -r config/ctags.d/* "$HOME"/.ctags.d/

  info "Successfully setup ctags. Press enter to continue..."
  read -r
}

setup_nvim () {
  info "Installing neovim and copying configs...Enter to continue"
  read -r
  local packages=(nvim)
  if ask_yn "${packages[*]} Install packages?"; then
    info "Installing ${packages[*]}"
    sudo snap install "${packages[@]}" --classic
  else
    info "Skipping neovim package download"
  fi

  local nvim_dir="$HOME/.config/nvim"
  local bin_dir="$HOME/bin"
  mkdir -p "$nvim_dir"
  info "copying nvim config to home"
  cp -r config/nvim/* "$nvim_dir"/
  info "copying git_diff_wrapper to $bin_dir"
  mkdir -p "$bin_dir"
  cp bin/git_diff_wrapper "$bin_dir"/git_diff_wrapper
}

setup_i3 () {
    local packages=(py3status)

    info "Setup i3 manually following https://i3wm.org/docs/repositories.html"
    info "Press enter to continue..."
    read -r

    if ask_yn "${packages[*]} Install packages?"; then
      sudo apt install "${packages[@]}"
    else
      info "Skipping py3status package download"
    fi

    info "Copying i3 config files to home"
    local i3_dir="$HOME/.config/i3"
    mkdir -p "$i3_dir"
    cp config/i3/config "$i3_dir"/config

    info "Copying py3status config files to home"
    mkdir -p "$HOME"/.config/py3status
    cp config/py3status/config "$HOME"/.config/py3status/config

    if ask_yn "Setup brightness controls?"; then
      i3_brightness_controls
    fi

    info "Manually setup i3lock for multimonitor https://github.com/shikherverma/i3lock-multimonitor.git"
    info "Press enter to continue..."
    read -r

    info "Successfully setup i3. Press enter to continue..."
    read -r
}

copy_config_files_from_home () {
  for file in $HOME/.{bashrc,gitconfig,git-completion.bash,aliases,bash_profile,bash_prompt,path,exports,screenrc,functions}; do
    info "Copying $file..."
    cp "$file" "home_files/"
  done

  # Nvim specific files
  info "Copying neovim files..."
  mkdir -p config/nvim
  mkdir -p config/nvim/lua
  mkdir -p config/nvim/ftdetect
  cp "$HOME"/.config/nvim/init.lua config/nvim/init.lua
  cp -r "$HOME"/.config/nvim/lua/* config/nvim/lua
  cp -r "$HOME"/.config/nvim/ftdetect/* config/nvim/ftdetect

  # i3 config
  info "Copying i3 files..."
  mkdir -p config/i3
  mkdir -p config/py3status
  cp "$HOME"/.config/i3/config config/i3/config
  cp "$HOME"/.config/py3status/config config/py3status/config

  # Clipboard
  info "Copying greenclip files..."
  cp "$HOME"/.config/greenclip.toml config/greenclip.toml

  # Rofi
  info "Copying rofi files..."
  mkdir -p config/rofi
  cp -r "$HOME"/.config/rofi/* config/rofi

  # Alacritty
  info "Copying alacritty files..."

  mkdir -p config/alacritty
  cp -r "$HOME"/.config/alacritty/alacritty.yml config/alacritty/alacritty.yml

  # Emacs
  info "Copying emacs files..."

  cp -r "$HOME"/.emacs.d/* config/emacs.d/

  # Custom Ctags
  info "Copying cusom ctags..."

  mkdir -p config/ctags.d
  cp -r "$HOME"/.ctags.d/* config/ctags.d/

}

copy_dot_files_to_home () {
  local common_dotfiles=(.bashrc .git-completion.bash .aliases .bash_profile .bash_prompt .path .screenrc .functions)
  local other_dotfiles=(.gitconfig .exports)
  if ask_yn "Copy dot files to home?"; then
    info "Copying dot files to home..."
    for file in "${common_dotfiles[@]}"; do
      cp "home_files/$file" "${HOME}/$file"
    done

    if ask_yn "Copy ${other_dotfiles[*]} as well. Note, these could have keys etc defined. Make sure to copy them over..."; then
      for file in "${other_dotfiles[@]}"; do
        cp "home_files/$file" "${HOME}/$file"
      done
    fi
  else
    info "Skipping copying dot files to home..."
  fi
}

install_cargo_packages () {
  local cargo_packages=(alacritty ripgrep fd-find)
  if ask_yn "${cargo_packages[*]} Install packages?"; then
    cargo install "${cargo_packages[@]}"
  else
    info "Skipping cargo packages..."
  fi
}

setup_gpg () {
  info "Import gpg key manually... gpg --import <path to secret>. Press enter to continue..."
  read -r
}

install_snap_packages () {
  # Snap packages
  # hugo htop slack emacs
  local snap_classic_packages=(emacs nvim youtube-dl go ccls)
  if ask_yn "Install classic snap packages? ${snap_classic_packages[*]}"; then
    for pkg in "${snap_classic_packages[@]}"
    do
      sudo snap install "$pkg" --classic
    done
  else
    info "Skipping snap classic pakages"
  fi

  local snap_packages=(hugo discord htop vlc)
  if ask_yn "Install other snap packages? ${snap_packages[*]}"; then
    for pkg in "${snap_packages[@]}"
    do
      sudo snap install "$pkg"
    done
  else
    info "Skipping snap other pakages"
  fi

  info "Done with Snap. Enter to continue..."
  read -r
}

setup_ledger () {
  info "Install ledger by cloning https://github.com/ledger/ledger"
  info "Commands:
    # Create conda env for ledger
    $ conda create -n ledger_dev python=3.10 # Boost has build issues with python 3.11\
    $ conda install pip
    $ echo \"conda activate ledger_dev\" > .env
    # Build and install using acprep
    $ ./acprep gitclean --prefix=$HOME/.local --python
    $ ./acprep dependencies
    $ PREFIX=/home/ssubramaniyam/.local
    $ ./acprep update --prefix=$HOME/.local --python
    $ ./acprep --prefix=\$PREFIX --debug --python make
    $ ./acprep --prefix=\$PREFIX --debug --python make install
  "
  info "Enter to continue..."
  read -r
}

install_apt_packages () {
  # import and trust gpg key
  if ask_yn "Update apt packages?"; then
    sudo apt update
    info "Press enter to continue..."
    read -r
  fi

  local apt_packages=(curl xdotool feh scrot gimp pavucontrol autoconf dnsmasq flatpak pass gpg cmake g++ pkg-config brightnessctl lua5.1 gnome-shell-pomodoro py3status ffmpeg imagemagick-6.q16 hyperfine powertop libpango1.0-0 xournal arandr nemo usb-creator-gtk net-tools screen qalc)
  local apt_dev_packages=(libglib2.0-dev libcairo2-dev rofi-dev libfontconfig1-dev libtool m4 automake libboost-all-dev libgmp-dev libmpfr-dev libboost-python-dev python3-dev)
  if ask_yn "${apt_packages[*]} Install packages?"; then
    sudo apt install "${apt_packages[@]}"
    info "Done Installing apt packages. Press Enter to continue..."
    read -r
  elif ask_yn "${apt_dev_packages[*]} Install dev packages?"; then
    sudo apt install "${apt_dev_packages[@]}"
    info "Done Installing apt-dev packages. Press Enter to continue..."
    read -r
  else
    info "Skipping apt packages..."
  fi
}

setup_sound () {
  info "Setup sound"
  local sound_packages=(bluez* blueman)
  if ask_yn "${sound_packages[*]} Install packages?"; then
    sudo apt install "${sound_packages[@]}"
    info "Done Installing sound packages. Press Enter to continue..."
    read -r
  else
    info "Skipping sound packages..."
  fi
  info "Setup sound and bluetooth headset using pipewire and wireplumber
   https://gist.github.com/the-spyke/2de98b22ff4f978ebf0650c90e82027e?permalink_comment_id=3976215
   You may need add-apt-repository ppa:pipewire-debian/pipewire-upstream"
  read -r
}

i3_brightness_controls () {
  # https://github.com/Hummer12007/brightnessctl
  # we use brightnessctl to control device brightness
  # Add user to video group
  local packages=(brightnessctl)
  local add_to_group="sudo usermod -aG video ${USER}"
  if ask_yn "${packages[*]} Setup brightness control packages for i3?"; then
    sudo apt install "${packages[@]}"
    info "Adding user to video group for brightnessctl. ${add_to_group}"
    eval "$add_to_group"
  else
    info "Skipping brightnessctl packages..."
  fi
  info "Done installing brightnessctl package. Press Enter to continue..."
  read -r
}

setup_rustup () {
  info "Checking for rustup"
  if (cmd_exists "rustup"); then
    info "rustup not found. Installing..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o /tmp/rust.sh
    if ask_yn "Run rust.sh?"; then
      bash /tmp/rust.sh
      info "Source cargo env"
      bash "$HOME/.cargo/env"
    else
      info "Skipping running rust.sh. Exiting..."
      exit 0
    fi
  fi
}

manual_setup_packages () {
  if ask_yn "Install manual packages?"; then
    info "Install Docker https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository"
    info "Enter to continue..."
    read -r
    info "Install powertop https://wiki.archlinux.org/title/powertop"
    info "Enter to continue..."
    read -r
    info "
      Install openjdk https://adoptium.net/temurin/releases/
      Copy jdk to /usr/lib/jvm
      Set JAVA_HOME appropriately in .exports
    "
    info "Enter to continue..."
    read -r
    info "Install dropbox https://www.dropbox.com/install-linux"
    info "Enter to continue..."
    read -r
    info "
      Install conda https://conda.io/en/latest/miniconda.html
      echo \"conda activate base\" >> ~/.env"
    info "Enter to continue..."
    read -r
    info "Install https://github.com/wting/autojump"
    info "Enter to continue..."
    read -r
    info "Install https://github.com/awslabs/git-secrets"
    info "Add git secrets --install -f to this repository"
    info "Enter to continue..."
    read -r
    info "
    Install Anki https://apps.ankiweb.net/
    Install with prefix
    Update anki.desktop to have the local paths
      Exec=/home/ssubramaniyam/.local/bin/anki %f
      TryExec=/home/ssubramaniyam/.local/bin/anki
    PREFIX=\"/home/ssubramaniyam/.local\" ./install.sh
    "
    info "Enter to continue..."
    read -r
    info "
      Install Scala with coursier https://get-coursier.io/docs/cli-installation
      JAVA_HOME=/usr/lib/jvm/<openjdk path> ./cs setup
    "
    info "Enter to continue..."
    read -r
    info "Manual Install kubectx tools https://github.com/ahmetb/kubectx#manual-installation-macos-and-linux"
    info "Should be cloned to workspace/kubectx for bin/ soft links to work"
    info "Enter to continue..."
    read -r
    info "
      Install fontawesome fonts https://fontawesome.com/v5/docs/desktop/setup/get-started.
      Install nerdfont icons https://www.nerdfonts.com/font-downloads
      Install ubuntu mono too if you want.
      Install codeicons.ttf
      Copy otfs to ~/.fonts
      Update fontcache fc-cache -f -v
      Enter to continue..."
    read -r
    info "
      Clone password store from github
      get completions from https://github.com/zx2c4/password-store/blob/master/src/completion/pass.bash-completion and save to ~/.pass-completion.bash
      Enter to continue...
    "
    read -r
  else
    info "Skipping manual packages..."
  fi
}

setup_cron_jobs () {
  info "Renewal script 0 11 * * MON <renew_script> > /dev/null 2>&1"
  info "Ledger updates - /home/ssubramaniyam/miniconda3/bin/python3 /home/ssubramaniyam/Dropbox/notes/finance/mandelbrot/fetch.py --ledger-file-path /home/ssubramaniyam/Dropbox/notes/finance/ledger.dat --ledger-price-db-update --price-db-path /home/ssubramaniyam/Dropbox/notes/finance/ledger-files/prices.db > /home/ssubramaniyam/Dropbox/notes/finance/mandelbrot/fetch.log 2>&1"
  info "Enter to continue"
  read -r
}

cmd_exists () {
  if (! command -v "$1" &> /dev/null); then
    return 0
  else
    return 1
  fi
}

setup_alacritty () {
  info "Copying config/alacritty/alacritty.yml to ~/.config/alacritty/alacritty.yml"
  mkdir -p "$HOME"/.config/alacritty
  cp config/alacritty/alacritty.yml "$HOME"/.config/alacritty/alacritty.yml
}

usage () {
  info "
  This setup process will guide you through installing some basic utilities on arch linux.
  "

  info "Usage: $PROG [--verbose] "
  for i in "${!fns[@]}"
  do
    info "[${i}]"
  done | sort
}

declare -A fns

fns["--help"]=usage
fns["-h"]=usage
# Setup commands
fns["--setup-rofi"]=setup_rofi
fns["--setup-nvim"]=setup_nvim
fns["--setup-gpg"]=setup_gpg
fns["--setup-sound"]=setup_sound
fns["--setup-cron-jobs"]=setup_cron_jobs
fns["--setup-i3"]=setup_i3
fns["--setup-alacritty"]=setup_alacritty
fns["--setup-emacs"]=setup_emacs
fns["--setup-ctags"]=setup_ctags
fns["--setup-php"]=setup_php
fns["--setup-gitsecrets"]=setup_gitsecrets
fns["--setup-greenclip"]=setup_greenclip
fns["--setup-fzf"]=setup_fzf
fns["--setup-rustup"]=setup_rustup
fns["--setup-ledger"]=setup_ledger

# Install stuff
fns["--install-apt-packages"]=install_apt_packages
fns["--install-snap-packages"]=install_snap_packages
fns["--install-cargo-packages"]=install_cargo_packages
fns["--install-other-packages"]=install_other_packages
fns["--install-flatpak-packages"]=install_flatpak_packages

# Higher-level commands
fns["--manual-setup-packages"]=manual_setup_packages
fns["--copy-dot-files-to-home"]=copy_dot_files_to_home
fns["--copy-config-from-home"]=copy_config_files_from_home

if [ $# -gt 1 ]; then
  err "Too many arguments"
  usage
  exit 1
fi

if [ $# -eq 0 ]; then
  run_setup
  exit 0
fi

if [[ -v fns[$1] ]]; then
  ${fns[$1]}
else
  err "Unknown argument $1"
  usage
  exit 1
fi

